<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on AgilePhD</title>
    <link>blog.agilephd.com/tags/python/</link>
    <description>Recent content in Python on AgilePhD</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="blog.agilephd.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zero-Knowledge Proofs: An Example using Python</title>
      <link>blog.agilephd.com/posts/zero_knowledge_proof_example/</link>
      <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/zero_knowledge_proof_example/</guid>
      <description>Here is a simple Python example that demonstrates a zero-knowledge proof. Keeping with the senario described in an earlier post about zero-knowledge proofs, I will use the color-blind friend and colored balls scenario as the context.&#xA;In this example, I will simulate the process where the prover wants to prove to the verifier, who is color-blind, whether he can distinguish between two balls of different colors without revealing which is which.</description>
    </item>
    <item>
      <title>Building an LLM Application with Langchain (revisited)</title>
      <link>blog.agilephd.com/posts/llm_langchain_revisited/</link>
      <pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/llm_langchain_revisited/</guid>
      <description>This is updated code from an earlier post about Langchain.&#xA;The code is being updated for three main reasons:&#xA;Some Windows users were having issues using Chroma for a vectorstore. I wanted to pass arguments to the script. The script needed more structure. Vectorstore In the earlier version, I used Chroma for storing the vectors. I liked this solution because it was easy and stored the results in a SQLite database.</description>
    </item>
    <item>
      <title>Building an LLM Application with Langchain</title>
      <link>blog.agilephd.com/posts/llm_langchain/</link>
      <pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/llm_langchain/</guid>
      <description>Primarily developed in Python, LangChain is a robust framework designed to simplify the development of applications that utilize large language models (LLMs). It enables developers to connect these models with various data sources and external APIs, facilitating the integration of advanced natural language processing capabilities into their applications. LangChain provides tools for constructing LLM-powered workflows, handling memory and state management, and ensuring scalability and efficiency. By offering a streamlined interface for working with LLMs, LangChain empowers developers to create sophisticated AI-driven solutions in areas such as chatbots, data analysis, content generation, and more, without needing extensive expertise in machine learning or AI model development.</description>
    </item>
    <item>
      <title>Elastic Beanstalk Healthcheck with a Django App</title>
      <link>blog.agilephd.com/posts/django_eb_healcheck/</link>
      <pubDate>Wed, 10 Jul 2024 20:32:38 -0500</pubDate>
      <guid>blog.agilephd.com/posts/django_eb_healcheck/</guid>
      <description>The Problem Elastic Beanstalk (EB) is an orchestration service offered by AWS for deploying web applications. The good thing about EB is that it handles much of the setup for you. The bad thing is that EB also includes services, such as Healthchecks, that do not work for a Django app without additional setup.&#xA;Although my app was deployed and appeared to be working correctly, the Elastic Beanstalk environment reported Severe/Degraded state.</description>
    </item>
    <item>
      <title>Asymmetric Cryptography with Python</title>
      <link>blog.agilephd.com/posts/asymmetric_cryptography/</link>
      <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/asymmetric_cryptography/</guid>
      <description>RSA (Rivest-Shamir-Adleman) Cryptography RSA cryptography, named after its inventors Ron Rivest, Adi Shamir, and Leonard Adleman, is a widely used asymmetric encryption algorithm. It is a fundamental tool in modern cryptography and is used for secure data transmission, digital signatures, and various other cryptographic applications. RSA relies on the mathematical properties of prime numbers for its security.&#xA;Here&amp;rsquo;s a simplified explanation of how RSA cryptography works:&#xA;Key Generation: The first step is to generate a pair of keys: a public key and a private key.</description>
    </item>
    <item>
      <title>Hashing</title>
      <link>blog.agilephd.com/posts/hashing/</link>
      <pubDate>Thu, 21 Mar 2024 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/hashing/</guid>
      <description>This post will discuss the concept of hashing and provide examples using the Python programming language.&#xA;The Hash A hash refers to a mathematical function that takes some type of information as input and returns an encrypted output with a fixed length. This output, or hash, is unique to the information used as the input. You can think of it as being like a fingerprint.&#xA;SHA256 is a popular cryptographic hash algorithm that produces a 256-bit hash value.</description>
    </item>
    <item>
      <title>Intro to Web Scraping with the Scrapy Package</title>
      <link>blog.agilephd.com/posts/scrapy_quotes/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/scrapy_quotes/</guid>
      <description>Web scraping is the automated process of extracting data from one, or more, websites. Automation allows for the collection and analysis of large volumes of web-based information efficiently. Utilizing tools and programming languages such as Python, web scraping involves sending requests to websites, parsing the HTML content, and retrieving specific data points like text, images, or links. This technique is widely used in various fields, including data analysis, market research, and content aggregation, allowing businesses and individuals to gather valuable insights and make informed decisions based on real-time web data.</description>
    </item>
    <item>
      <title>Django Rest Framework: Token Authentication</title>
      <link>blog.agilephd.com/posts/drf_token_authentication/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/drf_token_authentication/</guid>
      <description>A version of the code for this iteration of Tweeter can be viewed on GitHub.&#xA;Django REST Framework comes with several built-in authentication solutions. Most APIs will use one of these authentication types:&#xA;BasicAuthentication: each request is authenticated with a username and password. Basic authentication is inefficient and generally not used with production APIs. TokenAuthentication: users are assigned a complex token that is added to the header of each request.</description>
    </item>
    <item>
      <title>Django Rest Framework: API Permissions</title>
      <link>blog.agilephd.com/posts/api_permissions/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/api_permissions/</guid>
      <description>Note: This post is an extract from a demo project to build a simplistic Twitter app with API support.&#xA;At the moment, any anonymous, non-authorized user can access our API endpoints. Although we might not mind anonymous viewing, anyone can create, edit, update, or delete a tweet.&#xA;As an example, the tweet detail page http://localhost:8000/api/v1/tweets/1/ displays the tweet information, which is fine, except any random user, anonymous or otherwise, can update or delete an existing tweet.</description>
    </item>
    <item>
      <title>Django REST Framework</title>
      <link>blog.agilephd.com/posts/django_rest_framework/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/django_rest_framework/</guid>
      <description>Django and the Django REST Framework are a popular combination for building and maintaining robust Web APIs. The term API is a bit dated and stands for Application Program Interface. The important word is &amp;ldquo;Interface&amp;rdquo; in that the ability to communicate with other applications gives our web app value.&#xA;A version of this code can be found on GitHub.&#xA;HTTP The HTTP (Hypertext Transfer Protocol) protocol provides the structure for communicating files across the Internet.</description>
    </item>
    <item>
      <title>Add Email to a Django App</title>
      <link>blog.agilephd.com/posts/django_email/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/django_email/</guid>
      <description>Email Adding email to an application allows us to provide a better user experience. Users have come to expect certain features such as account confirmation and password reset which are usually accomplished via email.&#xA;A version of this code can be viewed on GitHub.&#xA;SendGrid You could acquire email services through dozens of reputable providers but one of the easiest, and free-ist, methods is to use the Sendgrid add-on via Heroku.</description>
    </item>
    <item>
      <title>Dates and Times and Strings, Oh My!</title>
      <link>blog.agilephd.com/posts/python_datetime/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/python_datetime/</guid>
      <description>Working with dates &amp;amp; times can be frustrating. Many systems that you may encounter require various formatting for the datetime object. Luckily, Python is really good at handling this.&#xA;Lions and tigers and bears, oh my!&#xA;datetime Python has a module called datetime for working with date and time objects.&#xA;import datetime now = datetime.datetime.now() print(type(now)) print(&amp;#34;Current datetime = &amp;#34;, now) today = datetime.datetime.now().date() print(type(today)) print(&amp;#34;Current date = &amp;#34;, today) current_time = datetime.</description>
    </item>
    <item>
      <title>Python Files</title>
      <link>blog.agilephd.com/posts/python_files/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/python_files/</guid>
      <description>In many situations, we will need to work with larger sets of data. Python easily allows for reading from and writing to files.&#xA;The open() method returns a file object, and is most commonly used with two arguments: open(filename, mode).&#xA;The first argument is a string containing the filename. The second argument is another string containing a few characters describing the way in which the file will be used. mode can be &#39;r&#39; when the file will only be read, &#39;w&#39; for only writing, and &#39;a&#39; opens the file for appending; any data written to the file is automatically added to the end.</description>
    </item>
    <item>
      <title>Python Dictionary</title>
      <link>blog.agilephd.com/posts/python_dictionary/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/python_dictionary/</guid>
      <description>A dictionary is a collection which is unordered, changeable and indexed.&#xA;Dictionary structure A dictionary, or dict, organizes data values by association with other data values rather than by sequential position. A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values. Dictionaries are initialized using curly braces { }.&#xA;&amp;gt;&amp;gt;&amp;gt; capitals = {&amp;#39;United States&amp;#39;: &amp;#39;Washington, DC&amp;#39;,&amp;#39;France&amp;#39;: &amp;#39;Paris&amp;#39;,&amp;#39;Italy&amp;#39;: &amp;#39;Rome&amp;#39;} &amp;gt;&amp;gt;&amp;gt; capitals {&amp;#39;United States&amp;#39;: &amp;#39;Washington, DC&amp;#39;, &amp;#39;France&amp;#39;: &amp;#39;Paris&amp;#39;, &amp;#39;Italy&amp;#39;: &amp;#39;Rome&amp;#39;} &amp;gt;&amp;gt;&amp;gt; type(capitals) &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; capitals[&amp;#39;Italy&amp;#39;] &amp;#39;Rome&amp;#39; &amp;gt;&amp;gt;&amp;gt; capitals[&amp;#39;Spain&amp;#39;] = &amp;#39;Madrid&amp;#39; &amp;gt;&amp;gt;&amp;gt; capitals {&amp;#39;United States&amp;#39;: &amp;#39;Washington, DC&amp;#39;, &amp;#39;France&amp;#39;: &amp;#39;Paris&amp;#39;, &amp;#39;Italy&amp;#39;: &amp;#39;Rome&amp;#39;, &amp;#39;Spain&amp;#39;: &amp;#39;Madrid&amp;#39;} &amp;gt;&amp;gt;&amp;gt; &amp;#39;Germany&amp;#39; in capitals False &amp;gt;&amp;gt;&amp;gt; &amp;#39;Italy&amp;#39; in capitals True &amp;gt;&amp;gt;&amp;gt; morecapitals = {&amp;#39;Germany&amp;#39;: &amp;#39;Berlin&amp;#39;,&amp;#39;United Kingdom&amp;#39;: &amp;#39;London&amp;#39;} &amp;gt;&amp;gt;&amp;gt; capitals.</description>
    </item>
    <item>
      <title>Python Lists</title>
      <link>blog.agilephd.com/posts/python_lists/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/python_lists/</guid>
      <description>In Python, a list is a sequence of data values called items or elements. An item can be of any type.&#xA;A Python list is similar to a list you would make in the real-world:&#xA;shopping list to-do list roster for a team guest list for a party List structure The logical structure of a list resembles the structure of a string. Items in a list are ordered by position. Each list item has a unique index specifying its position.</description>
    </item>
    <item>
      <title>Sprint Zero for a Data Scientist</title>
      <link>blog.agilephd.com/posts/sprint_zero/</link>
      <pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate>
      <guid>blog.agilephd.com/posts/sprint_zero/</guid>
      <description>In agile software development frameworks, such as Scrum, development is conducted in time-boxed work iterations called Sprints. Sprint Zero is all the work that needs to happen before you can start actually development1.&#xA;Python versions Technology is constantly changing. That the great thing about our industry and the frustrating thing about our industry. In Python, there was a bit of a riff when the language went from version 2.x to 3.</description>
    </item>
  </channel>
</rss>
