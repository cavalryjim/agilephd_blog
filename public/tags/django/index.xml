<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on AgilePhD</title>
    <link>//localhost:1313/tags/django/</link>
    <description>Recent content in Django on AgilePhD</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Jul 2024 20:32:38 -0500</lastBuildDate>
    <atom:link href="//localhost:1313/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Elastic Beanstalk Healthcheck with a Django App</title>
      <link>//localhost:1313/posts/django_eb_healcheck/</link>
      <pubDate>Wed, 10 Jul 2024 20:32:38 -0500</pubDate>
      <guid>//localhost:1313/posts/django_eb_healcheck/</guid>
      <description>The Problem Elastic Beanstalk (EB) is an orchestration service offered by AWS for deploying web applications. The good thing about EB is that it handles much of the setup for you. The bad thing is that EB also includes services, such as Healthchecks, that do not work for a Django app without additional setup.&#xA;Although my app was deployed and appeared to be working correctly, the Elastic Beanstalk environment reported Severe/Degraded state.</description>
    </item>
    <item>
      <title>Django Rest Framework: Token Authentication</title>
      <link>//localhost:1313/posts/drf_token_authentication/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/drf_token_authentication/</guid>
      <description>A version of the code for this iteration of Tweeter can be viewed on GitHub.&#xA;Django REST Framework comes with several built-in authentication solutions. Most APIs will use one of these authentication types:&#xA;BasicAuthentication: each request is authenticated with a username and password. Basic authentication is inefficient and generally not used with production APIs. TokenAuthentication: users are assigned a complex token that is added to the header of each request.</description>
    </item>
    <item>
      <title>Django Rest Framework: API Permissions</title>
      <link>//localhost:1313/posts/api_permissions/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/api_permissions/</guid>
      <description>Note: This post is an extract from a demo project to build a simplistic Twitter app with API support.&#xA;At the moment, any anonymous, non-authorized user can access our API endpoints. Although we might not mind anonymous viewing, anyone can create, edit, update, or delete a tweet.&#xA;As an example, the tweet detail page http://localhost:8000/api/v1/tweets/1/ displays the tweet information, which is fine, except any random user, anonymous or otherwise, can update or delete an existing tweet.</description>
    </item>
    <item>
      <title>Django REST Framework</title>
      <link>//localhost:1313/posts/django_rest_framework/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/django_rest_framework/</guid>
      <description>Django and the Django REST Framework are a popular combination for building and maintaining robust Web APIs. The term API is a bit dated and stands for Application Program Interface. The important word is &amp;ldquo;Interface&amp;rdquo; in that the ability to communicate with other applications gives our web app value.&#xA;A version of this code can be found on GitHub.&#xA;HTTP The HTTP (Hypertext Transfer Protocol) protocol provides the structure for communicating files across the Internet.</description>
    </item>
    <item>
      <title>Add Email to a Django App</title>
      <link>//localhost:1313/posts/django_email/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/django_email/</guid>
      <description>Email Adding email to an application allows us to provide a better user experience. Users have come to expect certain features such as account confirmation and password reset which are usually accomplished via email.&#xA;A version of this code can be viewed on GitHub.&#xA;SendGrid You could acquire email services through dozens of reputable providers but one of the easiest, and free-ist, methods is to use the Sendgrid add-on via Heroku.</description>
    </item>
  </channel>
</rss>
